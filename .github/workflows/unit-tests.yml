name: Unit Tests

on:
  push:
    branches: [main, develop, copilot/**]
  pull_request:
    branches: [main, develop]

jobs:
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
      
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
      
      - name: Generate Prisma Client
        run: cd backend && npx prisma generate
      
      - name: Run backend unit tests
        run: cd backend && npm run test:coverage
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-key-for-ci-only
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-only
      
      - name: Upload backend coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend-unit
          name: backend-unit-${{ matrix.node-version }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
      
      - name: Run frontend unit tests
        run: cd frontend && npm test -- --coverage --watchAll=false
        env:
          NODE_ENV: test
      
      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend-unit
          name: frontend-unit-${{ matrix.node-version }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  
  coverage-check:
    name: Coverage Threshold Check
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci && cd backend && npm ci && cd ../frontend && npm ci
      
      - name: Generate Prisma Client
        run: cd backend && npx prisma generate
      
      - name: Run backend tests with coverage
        run: cd backend && npm run test:coverage
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-key-for-ci-only
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-only
      
      - name: Run frontend tests with coverage
        run: cd frontend && npm test -- --coverage --watchAll=false
        env:
          NODE_ENV: test
      
      - name: Check backend coverage thresholds
        run: |
          cd backend
          COVERAGE=$(npx istanbul-badges-readme --silent || echo "0")
          echo "Backend coverage: $COVERAGE%"
          if [ $(echo "$COVERAGE < 90" | bc -l) -eq 1 ]; then
            echo "❌ Backend coverage $COVERAGE% is below 90% threshold"
            exit 1
          else
            echo "✅ Backend coverage $COVERAGE% meets 90% threshold"
          fi
      
      - name: Check frontend coverage thresholds
        run: |
          cd frontend
          COVERAGE=$(npx istanbul-badges-readme --silent || echo "0")
          echo "Frontend coverage: $COVERAGE%"
          if [ $(echo "$COVERAGE < 80" | bc -l) -eq 1 ]; then
            echo "❌ Frontend coverage $COVERAGE% is below 80% threshold"
            exit 1
          else
            echo "✅ Frontend coverage $COVERAGE% meets 80% threshold"
          fi
      
      - name: Generate coverage summary
        run: |
          echo "## Test Coverage Summary" > coverage-summary.md
          echo "" >> coverage-summary.md
          echo "### Backend Coverage" >> coverage-summary.md
          cd backend && npx istanbul-badges-readme >> ../coverage-summary.md || echo "No coverage data" >> ../coverage-summary.md
          cd ..
          echo "" >> coverage-summary.md
          echo "### Frontend Coverage" >> coverage-summary.md
          cd frontend && npx istanbul-badges-readme >> ../coverage-summary.md || echo "No coverage data" >> ../coverage-summary.md
      
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('coverage-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
