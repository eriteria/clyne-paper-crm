generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       User[]

  @@map("roles")
}

model Region {
  id             String    @id @default(cuid())
  name           String    @unique
  parentRegionId String?   @map("parent_region_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  invoices       Invoice[]
  parentRegion   Region?   @relation("RegionHierarchy", fields: [parentRegionId], references: [id])
  childRegions   Region[]  @relation("RegionHierarchy")
  teams          Team[]
  users          User[]

  @@map("regions")
}

model Team {
  id           String    @id @default(cuid())
  name         String    @unique
  leaderUserId String?   @map("leader_user_id")
  regionId     String    @map("region_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  invoices     Invoice[]
  leader       User?     @relation("TeamLeader", fields: [leaderUserId], references: [id])
  region       Region    @relation(fields: [regionId], references: [id])
  members      User[]    @relation("TeamMembers")

  @@map("teams")
}

model User {
  id               String     @id @default(cuid())
  fullName         String     @map("full_name")
  email            String     @unique
  phone            String?
  passwordHash     String     @map("password_hash")
  roleId           String     @map("role_id")
  teamId           String?    @map("team_id")
  regionId         String?    @map("region_id")
  isActive         Boolean    @default(true) @map("is_active")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  auditLogs        AuditLog[]
  invoices         Invoice[]
  ledTeams         Team[]     @relation("TeamLeader")
  managedCustomers Customer[] @relation("CustomerRelationshipManager")
  region           Region?    @relation(fields: [regionId], references: [id])
  role             Role       @relation(fields: [roleId], references: [id])
  team             Team?      @relation("TeamMembers", fields: [teamId], references: [id])
  waybills         Waybill[]

  @@map("users")
}

model InventoryItem {
  id              String        @id @default(cuid())
  sku             String        @unique
  name            String
  description     String?
  unit            String
  unitPrice       Decimal       @map("unit_price") @db.Decimal(10, 2)
  currentQuantity Decimal       @map("current_quantity") @db.Decimal(10, 2)
  minStock        Decimal       @map("min_stock") @db.Decimal(10, 2)
  location        String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  invoiceItems    InvoiceItem[]
  waybillItems    WaybillItem[]

  @@map("inventory_items")
}

model Waybill {
  id               String        @id @default(cuid())
  waybillNumber    String        @unique @map("waybill_number")
  date             DateTime
  supplier         String
  receivedByUserId String        @map("received_by_user_id")
  notes            String?
  createdAt        DateTime      @default(now()) @map("created_at")
  items            WaybillItem[]
  receivedBy       User          @relation(fields: [receivedByUserId], references: [id])

  @@map("waybills")
}

model WaybillItem {
  id               String        @id @default(cuid())
  waybillId        String        @map("waybill_id")
  inventoryItemId  String        @map("inventory_item_id")
  quantityReceived Decimal       @map("quantity_received") @db.Decimal(10, 2)
  unitCost         Decimal       @map("unit_cost") @db.Decimal(10, 2)
  batchNo          String?       @map("batch_no")
  expiryDate       DateTime?     @map("expiry_date")
  inventoryItem    InventoryItem @relation(fields: [inventoryItemId], references: [id])
  waybill          Waybill       @relation(fields: [waybillId], references: [id], onDelete: Cascade)

  @@map("waybill_items")
}

model Customer {
  id                    String    @id @default(cuid())
  name                  String
  email                 String?
  phone                 String?
  address               String?
  companyName           String?   @map("company_name")
  contactPerson         String?   @map("contact_person")
  relationshipManagerId String?   @map("relationship_manager_id")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  invoices              Invoice[]
  relationshipManager   User?     @relation("CustomerRelationshipManager", fields: [relationshipManagerId], references: [id])

  @@map("customers")
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique @map("invoice_number")
  date            DateTime
  customerId      String        @map("customer_id")
  customerName    String        @map("customer_name") // Keep for backward compatibility
  customerContact String?       @map("customer_contact") // Keep for backward compatibility
  billedByUserId  String        @map("billed_by_user_id")
  teamId          String?       @map("team_id")
  regionId        String?       @map("region_id")
  totalAmount     Decimal       @map("total_amount") @db.Decimal(12, 2)
  taxAmount       Decimal       @default(0) @map("tax_amount") @db.Decimal(10, 2)
  discountAmount  Decimal       @default(0) @map("discount_amount") @db.Decimal(10, 2)
  notes           String?
  dueDate         DateTime?     @map("due_date")
  status          String        @default("DRAFT")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  items           InvoiceItem[]
  customer        Customer      @relation(fields: [customerId], references: [id])
  billedBy        User          @relation(fields: [billedByUserId], references: [id])
  region          Region?       @relation(fields: [regionId], references: [id])
  team            Team?         @relation(fields: [teamId], references: [id])

  @@map("invoices")
}

model InvoiceItem {
  id              String        @id @default(cuid())
  invoiceId       String        @map("invoice_id")
  inventoryItemId String        @map("inventory_item_id")
  quantity        Decimal       @db.Decimal(10, 2)
  unitPrice       Decimal       @map("unit_price") @db.Decimal(10, 2)
  lineTotal       Decimal       @map("line_total") @db.Decimal(12, 2)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  invoice         Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model AuditLog {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  actionType    String   @map("action_type")
  entityType    String   @map("entity_type")
  entityId      String   @map("entity_id")
  previousValue String?  @map("previous_value")
  currentValue  String?  @map("current_value")
  createdAt     DateTime @default(now()) @map("created_at")
  user          User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model ReportsCache {
  id        String   @id @default(cuid())
  reportKey String   @unique @map("report_key")
  data      String
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  @@map("reports_cache")
}
