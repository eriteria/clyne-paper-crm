generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       User[]

  @@map("roles")
}

model Region {
  id             String    @id @default(cuid())
  name           String    @unique
  parentRegionId String?   @map("parent_region_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  invoices       Invoice[]
  parentRegion   Region?   @relation("RegionHierarchy", fields: [parentRegionId], references: [id])
  childRegions   Region[]  @relation("RegionHierarchy")
  users          User[]

  @@map("regions")
}

model Team {
  id           String         @id @default(cuid())
  name         String         @unique
  leaderUserId String?        @map("leader_user_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  description  String?
  customers    Customer[]     @relation("TeamCustomers")
  invoices     Invoice[]
  locations    TeamLocation[]
  leader       User?          @relation("TeamLeader", fields: [leaderUserId], references: [id])
  members      User[]         @relation("TeamMembers")

  @@map("teams")
}

model TeamLocation {
  teamId     String
  locationId String
  assignedAt DateTime @default(now())
  location   Location @relation(fields: [locationId], references: [id])
  team       Team     @relation(fields: [teamId], references: [id])

  @@id([teamId, locationId])
  @@map("team_locations")
}

model UserLocation {
  userId     String
  locationId String
  assignedAt DateTime @default(now()) @map("assigned_at")
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, locationId])
  @@map("user_locations")
}

model User {
  id                       String               @id @default(cuid())
  fullName                 String               @map("full_name")
  email                    String               @unique
  phone                    String?
  passwordHash             String               @map("password_hash")
  roleId                   String               @map("role_id")
  teamId                   String?              @map("team_id")
  regionId                 String?              @map("region_id")
  isActive                 Boolean              @default(true) @map("is_active")
  createdAt                DateTime             @default(now()) @map("created_at")
  updatedAt                DateTime             @updatedAt @map("updated_at")
  primaryLocationId        String?              @map("primary_location_id")
  auditLogs                AuditLog[]
  appliedCredits           CreditApplication[]  @relation("CreditApplicationUser")
  createdCredits           Credit[]             @relation("CreditCreatedBy")
  recordedCustomerPayments CustomerPayment[]    @relation("CustomerPaymentRecordedBy")
  managedCustomers         Customer[]           @relation("CustomerRelationshipManager")
  invoices                 Invoice[]
  monthlySalesTargets      MonthlySalesTarget[]
  recordedPayments         Payment[]            @relation("PaymentRecordedBy")
  quickbooksExports        QuickBooksExport[]   @relation("QuickBooksExportUser")
  ledTeams                 Team[]               @relation("TeamLeader")
  assignedLocations        UserLocation[]
  primaryLocation          Location?            @relation("UserPrimaryLocation", fields: [primaryLocationId], references: [id])
  region                   Region?              @relation(fields: [regionId], references: [id])
  role                     Role                 @relation(fields: [roleId], references: [id])
  team                     Team?                @relation("TeamMembers", fields: [teamId], references: [id])
  waybills                 Waybill[]

  @@map("users")
}

model InventoryItem {
  id               String            @id @default(cuid())
  sku              String            @unique
  name             String
  description      String?
  unit             String
  unitPrice        Decimal           @map("unit_price") @db.Decimal(10, 2)
  currentQuantity  Decimal           @map("current_quantity") @db.Decimal(10, 2)
  minStock         Decimal           @map("min_stock") @db.Decimal(10, 2)
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  productId        String?           @map("product_id")
  locationId       String            @map("location_id")
  location         Location          @relation(fields: [locationId], references: [id])
  product          Product?          @relation(fields: [productId], references: [id])
  invoiceItems     InvoiceItem[]
  salesReturnItems SalesReturnItem[]
  waybillItems     WaybillItem[]

  @@unique([sku, locationId])
  @@map("inventory_items")
}

model ProductGroup {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("product_groups")
}

model Product {
  id                  String               @id @default(cuid())
  name                String
  productGroupId      String               @map("product_group_id")
  monthlyTarget       Decimal              @default(0) @map("monthly_target") @db.Decimal(12, 2)
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  inventoryItems      InventoryItem[]
  monthlySalesTargets MonthlySalesTarget[]
  productGroup        ProductGroup         @relation(fields: [productGroupId], references: [id])

  @@unique([name, productGroupId])
  @@map("products")
}

model Waybill {
  id                  String        @id @default(cuid())
  waybillNumber       String        @unique @map("waybill_number")
  date                DateTime
  supplier            String
  receivedByUserId    String        @map("received_by_user_id")
  notes               String?
  createdAt           DateTime      @default(now()) @map("created_at")
  locationId          String        @map("location_id")
  processedAt         DateTime?     @map("processed_at")
  processedBy         String?       @map("processed_by")
  status              WaybillStatus @default(PENDING)
  sourceLocationId    String?       @map("source_location_id")
  transferType        String        @default("RECEIVING")
  items               WaybillItem[]
  destinationLocation Location      @relation("WaybillDestination", fields: [locationId], references: [id])
  receivedBy          User          @relation(fields: [receivedByUserId], references: [id])
  sourceLocation      Location?     @relation("WaybillSource", fields: [sourceLocationId], references: [id])

  @@map("waybills")
}

model WaybillItem {
  id               String            @id @default(cuid())
  waybillId        String            @map("waybill_id")
  inventoryItemId  String?           @map("inventory_item_id")
  quantityReceived Decimal           @map("quantity_received") @db.Decimal(10, 2)
  unitCost         Decimal           @map("unit_cost") @db.Decimal(10, 2)
  batchNo          String?           @map("batch_no")
  expiryDate       DateTime?         @map("expiry_date")
  description      String?
  name             String
  processedAt      DateTime?         @map("processed_at")
  sku              String
  status           WaybillItemStatus @default(PENDING)
  unit             String
  inventoryItem    InventoryItem?    @relation(fields: [inventoryItemId], references: [id])
  waybill          Waybill           @relation(fields: [waybillId], references: [id], onDelete: Cascade)

  @@map("waybill_items")
}

model Customer {
  id                      String            @id @default(cuid())
  name                    String
  email                   String?
  phone                   String?
  address                 String?
  companyName             String?           @map("company_name")
  contactPerson           String?           @map("contact_person")
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @updatedAt @map("updated_at")
  relationshipManagerId   String?           @map("relationship_manager_id")
  lastOrderDate           DateTime?         @map("last_order_date")
  onboardingDate          DateTime?         @map("onboarding_date")
  relationshipManagerName String?           @map("relationship_manager_name")
  teamId                  String?           @map("team_id")
  locationId              String?           @map("location_id")
  defaultPaymentTermDays  Int               @default(30) @map("default_payment_term_days")
  openingBalance          Decimal           @default(0) @map("opening_balance") @db.Decimal(12, 2)
  returnPolicyDays        Int               @default(30) @map("return_policy_days")
  credits                 Credit[]
  payments                CustomerPayment[]
  locationRef             Location?         @relation(fields: [locationId], references: [id])
  relationshipManager     User?             @relation("CustomerRelationshipManager", fields: [relationshipManagerId], references: [id])
  team                    Team?             @relation("TeamCustomers", fields: [teamId], references: [id])
  invoices                Invoice[]
  salesReturns            SalesReturn[]

  @@map("customers")
}

model Invoice {
  id                  String               @id @default(cuid())
  invoiceNumber       String               @unique @map("invoice_number")
  date                DateTime
  customerName        String               @map("customer_name")
  customerContact     String?              @map("customer_contact")
  billedByUserId      String               @map("billed_by_user_id")
  teamId              String?              @map("team_id")
  regionId            String?              @map("region_id")
  totalAmount         Decimal              @map("total_amount") @db.Decimal(12, 2)
  status              String               @default("DRAFT")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  customerId          String               @map("customer_id")
  discountAmount      Decimal              @default(0) @map("discount_amount") @db.Decimal(10, 2)
  dueDate             DateTime?            @map("due_date")
  notes               String?
  taxAmount           Decimal              @default(0) @map("tax_amount") @db.Decimal(10, 2)
  balance             Decimal              @map("balance") @db.Decimal(12, 2)
  paymentMethod       String?              @map("payment_method")
  bankAccountId       String?              @map("bank_account_id")
  creditApplications  CreditApplication[]  @relation("CreditApplications")
  items               InvoiceItem[]
  billedBy            User                 @relation(fields: [billedByUserId], references: [id])
  customer            Customer             @relation(fields: [customerId], references: [id])
  region              Region?              @relation(fields: [regionId], references: [id])
  team                Team?                @relation(fields: [teamId], references: [id])
  bankAccount         BankAccount?         @relation(fields: [bankAccountId], references: [id])
  paymentApplications PaymentApplication[]
  payments            Payment[]
  salesReturns        SalesReturn[]

  @@map("invoices")
}

model InvoiceItem {
  id              String        @id @default(cuid())
  invoiceId       String        @map("invoice_id")
  inventoryItemId String        @map("inventory_item_id")
  quantity        Decimal       @db.Decimal(10, 2)
  unitPrice       Decimal       @map("unit_price") @db.Decimal(10, 2)
  lineTotal       Decimal       @map("line_total") @db.Decimal(12, 2)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  invoice         Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model AuditLog {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  actionType    String   @map("action_type")
  entityType    String   @map("entity_type")
  entityId      String   @map("entity_id")
  previousValue String?  @map("previous_value")
  currentValue  String?  @map("current_value")
  createdAt     DateTime @default(now()) @map("created_at")
  user          User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Payment {
  id               String   @id @default(cuid())
  invoiceId        String   @map("invoice_id")
  amount           Decimal  @db.Decimal(12, 2)
  paymentMethod    String   @map("payment_method")
  paymentDate      DateTime @map("payment_date")
  referenceNumber  String?  @map("reference_number")
  notes            String?
  recordedByUserId String   @map("recorded_by_user_id")
  status           String   @default("COMPLETED")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  invoice          Invoice  @relation(fields: [invoiceId], references: [id])
  recordedBy       User     @relation("PaymentRecordedBy", fields: [recordedByUserId], references: [id])

  @@map("payments")
}

model CustomerPayment {
  id                  String               @id @default(cuid())
  customerId          String               @map("customer_id")
  amount              Decimal              @db.Decimal(12, 2)
  paymentMethod       String               @map("payment_method")
  paymentDate         DateTime             @map("payment_date")
  referenceNumber     String?              @map("reference_number")
  notes               String?
  recordedByUserId    String               @map("recorded_by_user_id")
  status              String               @default("COMPLETED")
  allocatedAmount     Decimal              @default(0) @map("allocated_amount") @db.Decimal(12, 2)
  creditAmount        Decimal              @default(0) @map("credit_amount") @db.Decimal(12, 2)
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  bankAccountId       String?              @map("bank_account_id")
  customer            Customer             @relation(fields: [customerId], references: [id])
  recordedBy          User                 @relation("CustomerPaymentRecordedBy", fields: [recordedByUserId], references: [id])
  bankAccount         BankAccount?         @relation(fields: [bankAccountId], references: [id])
  paymentApplications PaymentApplication[]

  @@map("customer_payments")
}

model PaymentApplication {
  id                String          @id @default(cuid())
  customerPaymentId String          @map("customer_payment_id")
  invoiceId         String          @map("invoice_id")
  amountApplied     Decimal         @map("amount_applied") @db.Decimal(12, 2)
  appliedDate       DateTime        @default(now()) @map("applied_date")
  notes             String?
  createdAt         DateTime        @default(now()) @map("created_at")
  customerPayment   CustomerPayment @relation(fields: [customerPaymentId], references: [id], onDelete: Cascade)
  invoice           Invoice         @relation(fields: [invoiceId], references: [id])

  @@map("payment_applications")
}

model Credit {
  id                 String              @id @default(cuid())
  customerId         String              @map("customer_id")
  amount             Decimal             @db.Decimal(12, 2)
  availableAmount    Decimal             @map("available_amount") @db.Decimal(12, 2)
  sourcePaymentId    String?             @map("source_payment_id")
  reason             String              @default("OVERPAYMENT")
  description        String?
  createdByUserId    String              @map("created_by_user_id")
  status             String              @default("ACTIVE")
  expiryDate         DateTime?           @map("expiry_date")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  creditApplications CreditApplication[]
  createdBy          User                @relation("CreditCreatedBy", fields: [createdByUserId], references: [id])
  customer           Customer            @relation(fields: [customerId], references: [id])

  @@map("credits")
}

model CreditApplication {
  id              String   @id @default(cuid())
  creditId        String   @map("credit_id")
  invoiceId       String   @map("invoice_id")
  amountApplied   Decimal  @map("amount_applied") @db.Decimal(12, 2)
  appliedDate     DateTime @default(now()) @map("applied_date")
  appliedByUserId String   @map("applied_by_user_id")
  notes           String?
  createdAt       DateTime @default(now()) @map("created_at")
  appliedBy       User     @relation("CreditApplicationUser", fields: [appliedByUserId], references: [id])
  credit          Credit   @relation(fields: [creditId], references: [id], onDelete: Cascade)
  invoice         Invoice  @relation("CreditApplications", fields: [invoiceId], references: [id])

  @@map("credit_applications")
}

model TaxRate {
  id          String   @id @default(cuid())
  name        String   @unique
  rate        Decimal  @db.Decimal(5, 4)
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("tax_rates")
}

model QuickBooksExport {
  id               String   @id @default(cuid())
  exportType       String   @map("export_type")
  entityIds        String[] @map("entity_ids")
  exportData       String   @map("export_data")
  exportedByUserId String   @map("exported_by_user_id")
  exportDate       DateTime @map("export_date")
  filename         String?
  status           String   @default("PENDING")
  notes            String?
  createdAt        DateTime @default(now()) @map("created_at")
  exportedBy       User     @relation("QuickBooksExportUser", fields: [exportedByUserId], references: [id])

  @@map("quickbooks_exports")
}

model ReportsCache {
  id        String   @id @default(cuid())
  reportKey String   @unique @map("report_key")
  data      String
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  @@map("reports_cache")
}

model Location {
  id               String          @id @default(cuid())
  name             String          @unique
  description      String?
  isActive         Boolean         @default(true) @map("is_active")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  customers        Customer[]
  inventory        InventoryItem[]
  teams            TeamLocation[]
  assignedUsers    UserLocation[]
  primaryUsers     User[]          @relation("UserPrimaryLocation")
  receivedWaybills Waybill[]       @relation("WaybillDestination")
  sentWaybills     Waybill[]       @relation("WaybillSource")

  @@map("locations")
}

model MonthlySalesTarget {
  id               String   @id @default(cuid())
  productId        String   @map("product_id")
  userId           String   @map("user_id")
  year             Int
  month            Int
  targetQuantity   Decimal  @default(0) @map("target_quantity") @db.Decimal(10, 2)
  achievedQuantity Decimal  @default(0) @map("achieved_quantity") @db.Decimal(10, 2)
  targetAmount     Decimal  @default(0) @map("target_amount") @db.Decimal(12, 2)
  achievedAmount   Decimal  @default(0) @map("achieved_amount") @db.Decimal(12, 2)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId, year, month], name: "monthly_sales_targets_product_user_year_month_key")
  @@map("monthly_sales_targets")
}

model SalesReturn {
  id            String            @id @default(cuid())
  returnNumber  String            @unique @map("return_number")
  invoiceId     String            @map("invoice_id")
  customerId    String            @map("customer_id")
  returnDate    DateTime          @default(now()) @map("return_date")
  reason        String
  notes         String?
  totalAmount   Decimal           @map("total_amount") @db.Decimal(12, 2)
  refundMethod  String            @map("refund_method")
  refundStatus  String            @default("Pending") @map("refund_status")
  restockStatus String            @default("Pending") @map("restock_status")
  processedAt   DateTime?         @map("processed_at")
  processedBy   String?           @map("processed_by")
  createdBy     String            @map("created_by")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  items         SalesReturnItem[]
  customer      Customer          @relation(fields: [customerId], references: [id])
  invoice       Invoice           @relation(fields: [invoiceId], references: [id])

  @@map("sales_returns")
}

model SalesReturnItem {
  id               String         @id @default(cuid())
  salesReturnId    String         @map("sales_return_id")
  invoiceItemId    String?        @map("invoice_item_id")
  inventoryItemId  String?        @map("inventory_item_id")
  productName      String         @map("product_name")
  sku              String
  quantityReturned Decimal        @map("quantity_returned") @db.Decimal(10, 2)
  unitPrice        Decimal        @map("unit_price") @db.Decimal(10, 2)
  subtotal         Decimal        @db.Decimal(12, 2)
  condition        String
  restocked        Boolean        @default(false)
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  inventoryItem    InventoryItem? @relation(fields: [inventoryItemId], references: [id])
  salesReturn      SalesReturn    @relation(fields: [salesReturnId], references: [id], onDelete: Cascade)

  @@map("sales_return_items")
}

enum WaybillStatus {
  PENDING
  PROCESSING
  COMPLETED
  REVIEW
}

enum WaybillItemStatus {
  PENDING
  MATCHED
  NEW_PRODUCT
  PROCESSED
}

model BankAccount {
  id               String            @id @default(cuid())
  accountName      String            @map("account_name")
  accountNumber    String            @map("account_number")
  bankName         String            @map("bank_name")
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  invoices         Invoice[]
  customerPayments CustomerPayment[]

  @@map("bank_accounts")
}
