generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       User[]

  @@map("roles")
}

model Region {
  id             String    @id @default(cuid())
  name           String    @unique
  parentRegionId String?   @map("parent_region_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  invoices       Invoice[]
  parentRegion   Region?   @relation("RegionHierarchy", fields: [parentRegionId], references: [id])
  childRegions   Region[]  @relation("RegionHierarchy")
  users          User[]

  @@map("regions")
}

model Team {
  id           String    @id @default(cuid())
  name         String    @unique
  leaderUserId String?   @map("leader_user_id")
  locationId   String    @map("location_id")
  description  String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  invoices     Invoice[]
  customers    Customer[] @relation("TeamCustomers")
  leader       User?     @relation("TeamLeader", fields: [leaderUserId], references: [id])
  location     Location  @relation(fields: [locationId], references: [id])
  members      User[]    @relation("TeamMembers")

  @@map("teams")
}

model User {
  id                    String                @id @default(cuid())
  fullName              String                @map("full_name")
  email                 String                @unique
  phone                 String?
  passwordHash          String                @map("password_hash")
  roleId                String                @map("role_id")
  teamId                String?               @map("team_id")
  regionId              String?               @map("region_id")
  isActive              Boolean               @default(true) @map("is_active")
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")
  auditLogs             AuditLog[]
  invoices              Invoice[]
  ledTeams              Team[]                @relation("TeamLeader")
  managedCustomers      Customer[]            @relation("CustomerRelationshipManager")
  monthlySalesTargets   MonthlySalesTarget[]
  recordedPayments      Payment[]             @relation("PaymentRecordedBy")
  recordedCustomerPayments CustomerPayment[]  @relation("CustomerPaymentRecordedBy")
  createdCredits        Credit[]              @relation("CreditCreatedBy")
  appliedCredits        CreditApplication[]   @relation("CreditApplicationUser")
  quickbooksExports     QuickBooksExport[]    @relation("QuickBooksExportUser")
  region                Region?               @relation(fields: [regionId], references: [id])
  role                  Role                  @relation(fields: [roleId], references: [id])
  team                  Team?                 @relation("TeamMembers", fields: [teamId], references: [id])
  waybills              Waybill[]

  @@map("users")
}

model InventoryItem {
  id              String        @id @default(cuid())
  sku             String        @unique
  name            String
  description     String?
  unit            String
  unitPrice       Decimal       @map("unit_price") @db.Decimal(10, 2)
  currentQuantity Decimal       @map("current_quantity") @db.Decimal(10, 2)
  minStock        Decimal       @map("min_stock") @db.Decimal(10, 2)
  location        String?
  productId       String?       @map("product_id") // Link to Product for sales tracking
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  invoiceItems    InvoiceItem[]
  waybillItems    WaybillItem[]
  product         Product?      @relation(fields: [productId], references: [id])

  @@map("inventory_items")
}

model ProductGroup {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("product_groups")
}

model Product {
  id                  String                @id @default(cuid())
  name                String
  productGroupId      String                @map("product_group_id")
  monthlyTarget       Decimal               @default(0) @map("monthly_target") @db.Decimal(12, 2)
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  inventoryItems      InventoryItem[]
  monthlySalesTargets MonthlySalesTarget[]
  productGroup        ProductGroup          @relation(fields: [productGroupId], references: [id])

  @@unique([name, productGroupId]) // Prevent duplicate product names within same group
  @@map("products")
}

model Waybill {
  id               String        @id @default(cuid())
  waybillNumber    String        @unique @map("waybill_number")
  date             DateTime
  supplier         String
  receivedByUserId String        @map("received_by_user_id")
  notes            String?
  createdAt        DateTime      @default(now()) @map("created_at")
  items            WaybillItem[]
  receivedBy       User          @relation(fields: [receivedByUserId], references: [id])

  @@map("waybills")
}

model WaybillItem {
  id               String        @id @default(cuid())
  waybillId        String        @map("waybill_id")
  inventoryItemId  String        @map("inventory_item_id")
  quantityReceived Decimal       @map("quantity_received") @db.Decimal(10, 2)
  unitCost         Decimal       @map("unit_cost") @db.Decimal(10, 2)
  batchNo          String?       @map("batch_no")
  expiryDate       DateTime?     @map("expiry_date")
  inventoryItem    InventoryItem @relation(fields: [inventoryItemId], references: [id])
  waybill          Waybill       @relation(fields: [waybillId], references: [id], onDelete: Cascade)

  @@map("waybill_items")
}

model Customer {
  id                    String    @id @default(cuid())
  name                  String
  email                 String?
  phone                 String?
  address               String?
  location              String?   // For LOCATION from Excel (kept for compatibility)
  locationId            String?   @map("location_id") // Foreign key to Location table
  companyName           String?   @map("company_name")
  contactPerson         String?   @map("contact_person")
  relationshipManagerId String?   @map("relationship_manager_id")
  teamId                String?   @map("team_id") // Team assignment based on location
  onboardingDate        DateTime? @map("onboarding_date") // For DATE OF ONBOARDING from Excel
  lastOrderDate         DateTime? @map("last_order_date") // For LAST ORDER DATE from Excel
  relationshipManagerName String? @map("relationship_manager_name") // Temporary field for import
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  invoices              Invoice[]
  payments              CustomerPayment[]
  credits               Credit[]
  locationRef           Location? @relation(fields: [locationId], references: [id])
  relationshipManager   User?     @relation("CustomerRelationshipManager", fields: [relationshipManagerId], references: [id])
  team                  Team?     @relation("TeamCustomers", fields: [teamId], references: [id])

  @@map("customers")
}

model Invoice {
  id                  String               @id @default(cuid())
  invoiceNumber       String               @unique @map("invoice_number")
  date                DateTime
  customerId          String               @map("customer_id")
  customerName        String               @map("customer_name") // Keep for backward compatibility
  customerContact     String?              @map("customer_contact") // Keep for backward compatibility
  billedByUserId      String               @map("billed_by_user_id")
  teamId              String?              @map("team_id")
  regionId            String?              @map("region_id")
  totalAmount         Decimal              @map("total_amount") @db.Decimal(12, 2)
  balance             Decimal              @map("balance") @db.Decimal(12, 2) // Remaining balance
  taxAmount           Decimal              @default(0) @map("tax_amount") @db.Decimal(10, 2)
  discountAmount      Decimal              @default(0) @map("discount_amount") @db.Decimal(10, 2)
  notes               String?
  dueDate             DateTime?            @map("due_date")
  status              String               @default("DRAFT") // DRAFT, OPEN, PARTIAL, PAID, CANCELLED
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  items               InvoiceItem[]
  payments            Payment[]
  paymentApplications PaymentApplication[]
  creditApplications  CreditApplication[]  @relation("CreditApplications")
  customer            Customer             @relation(fields: [customerId], references: [id])
  billedBy            User                 @relation(fields: [billedByUserId], references: [id])
  region              Region?              @relation(fields: [regionId], references: [id])
  team                Team?                @relation(fields: [teamId], references: [id])

  @@map("invoices")
}

model InvoiceItem {
  id              String        @id @default(cuid())
  invoiceId       String        @map("invoice_id")
  inventoryItemId String        @map("inventory_item_id")
  quantity        Decimal       @db.Decimal(10, 2)
  unitPrice       Decimal       @map("unit_price") @db.Decimal(10, 2)
  lineTotal       Decimal       @map("line_total") @db.Decimal(12, 2)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  invoice         Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model AuditLog {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  actionType    String   @map("action_type")
  entityType    String   @map("entity_type")
  entityId      String   @map("entity_id")
  previousValue String?  @map("previous_value")
  currentValue  String?  @map("current_value")
  createdAt     DateTime @default(now()) @map("created_at")
  user          User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Payment {
  id              String   @id @default(cuid())
  invoiceId       String   @map("invoice_id")
  amount          Decimal  @db.Decimal(12, 2)
  paymentMethod   String   @map("payment_method") // CASH, BANK_TRANSFER, CHEQUE, CARD
  paymentDate     DateTime @map("payment_date")
  referenceNumber String?  @map("reference_number")
  notes           String?
  recordedByUserId String  @map("recorded_by_user_id")
  status          String   @default("COMPLETED") // PENDING, COMPLETED, FAILED, CANCELLED
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  invoice         Invoice  @relation(fields: [invoiceId], references: [id])
  recordedBy      User     @relation("PaymentRecordedBy", fields: [recordedByUserId], references: [id])

  @@map("payments")
}

// New comprehensive payment management system
model CustomerPayment {
  id                  String               @id @default(cuid())
  customerId          String               @map("customer_id")
  amount              Decimal              @db.Decimal(12, 2)
  paymentMethod       String               @map("payment_method") // CASH, BANK_TRANSFER, CHEQUE, CARD, MOBILE_MONEY
  paymentDate         DateTime             @map("payment_date")
  referenceNumber     String?              @map("reference_number")
  notes               String?
  recordedByUserId    String               @map("recorded_by_user_id")
  status              String               @default("COMPLETED") // PENDING, COMPLETED, FAILED, CANCELLED
  allocatedAmount     Decimal              @default(0) @map("allocated_amount") @db.Decimal(12, 2) // Amount allocated to invoices
  creditAmount        Decimal              @default(0) @map("credit_amount") @db.Decimal(12, 2) // Amount converted to credit
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  customer            Customer             @relation(fields: [customerId], references: [id])
  recordedBy          User                 @relation("CustomerPaymentRecordedBy", fields: [recordedByUserId], references: [id])
  paymentApplications PaymentApplication[]

  @@map("customer_payments")
}

model PaymentApplication {
  id                String          @id @default(cuid())
  customerPaymentId String          @map("customer_payment_id")
  invoiceId         String          @map("invoice_id")
  amountApplied     Decimal         @map("amount_applied") @db.Decimal(12, 2)
  appliedDate       DateTime        @default(now()) @map("applied_date")
  notes             String?
  createdAt         DateTime        @default(now()) @map("created_at")
  customerPayment   CustomerPayment @relation(fields: [customerPaymentId], references: [id], onDelete: Cascade)
  invoice           Invoice         @relation(fields: [invoiceId], references: [id])

  @@map("payment_applications")
}

model Credit {
  id                String             @id @default(cuid())
  customerId        String             @map("customer_id")
  amount            Decimal            @db.Decimal(12, 2)
  availableAmount   Decimal            @map("available_amount") @db.Decimal(12, 2) // Remaining available credit
  sourcePaymentId   String?            @map("source_payment_id") // Reference to payment that created the credit
  reason            String             @default("OVERPAYMENT") // OVERPAYMENT, RETURN, ADJUSTMENT, OTHER
  description       String?
  createdByUserId   String             @map("created_by_user_id")
  status            String             @default("ACTIVE") // ACTIVE, APPLIED, EXPIRED, CANCELLED
  expiryDate        DateTime?          @map("expiry_date")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  customer          Customer           @relation(fields: [customerId], references: [id])
  createdBy         User               @relation("CreditCreatedBy", fields: [createdByUserId], references: [id])
  creditApplications CreditApplication[]

  @@map("credits")
}

model CreditApplication {
  id            String   @id @default(cuid())
  creditId      String   @map("credit_id")
  invoiceId     String   @map("invoice_id")
  amountApplied Decimal  @map("amount_applied") @db.Decimal(12, 2)
  appliedDate   DateTime @default(now()) @map("applied_date")
  appliedByUserId String @map("applied_by_user_id")
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  credit        Credit   @relation(fields: [creditId], references: [id], onDelete: Cascade)
  invoice       Invoice  @relation("CreditApplications", fields: [invoiceId], references: [id])
  appliedBy     User     @relation("CreditApplicationUser", fields: [appliedByUserId], references: [id])

  @@map("credit_applications")
}

model TaxRate {
  id          String   @id @default(cuid())
  name        String   @unique
  rate        Decimal  @db.Decimal(5, 4) // e.g., 0.075 for 7.5% VAT
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("tax_rates")
}

model QuickBooksExport {
  id              String   @id @default(cuid())
  exportType      String   @map("export_type") // INVOICE, PAYMENT, CUSTOMER
  entityIds       String[] @map("entity_ids") // Array of invoice/payment/customer IDs
  exportData      String   @map("export_data") // JSON data for QuickBooks
  exportedByUserId String  @map("exported_by_user_id")
  exportDate      DateTime @map("export_date")
  filename        String?
  status          String   @default("PENDING") // PENDING, COMPLETED, FAILED
  notes           String?
  createdAt       DateTime @default(now()) @map("created_at")
  exportedBy      User     @relation("QuickBooksExportUser", fields: [exportedByUserId], references: [id])

  @@map("quickbooks_exports")
}

model ReportsCache {
  id        String   @id @default(cuid())
  reportKey String   @unique @map("report_key")
  data      String
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  @@map("reports_cache")
}

model Location {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  customers   Customer[]
  teams       Team[]

  @@map("locations")
}

model MonthlySalesTarget {
  id                String   @id @default(cuid())
  productId         String   @map("product_id")
  userId            String   @map("user_id")
  year              Int
  month             Int
  targetQuantity    Decimal  @default(0) @map("target_quantity") @db.Decimal(10, 2)
  achievedQuantity  Decimal  @default(0) @map("achieved_quantity") @db.Decimal(10, 2)
  targetAmount      Decimal  @default(0) @map("target_amount") @db.Decimal(12, 2)
  achievedAmount    Decimal  @default(0) @map("achieved_amount") @db.Decimal(12, 2)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId, year, month], name: "monthly_sales_targets_product_user_year_month_key")
  @@map("monthly_sales_targets")
}
